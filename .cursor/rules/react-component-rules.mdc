---
alwaysApply: true
globs: ['src/components/**/*']
---

# React Component Rules

## Overview

This document defines the rules and best practices for creating React components in the Portfolio v3 project, with a focus on 'button' component and other UI components.

## React Components rules

- Use functional components with hooks exclusively
- Component files should be in PascalCase (e.g., `Button.tsx`, `Header.tsx`)
- Keep components small and focused on a single responsibility
- Use custom hooks for reusable logic

### Component Creation Guidelines

1. **Directory Structure:**

   ```bash
   mkdir -p src/components/Customs/ComponentName
   ```

2. **File Structure:**

   - File: `src/components/Customs/ComponentName/index.tsx`
   - Use PascalCase for component name
   - Follow the component template above

3. **Component Template:**
   All components should follow this structure:

```typescript
import { type FC } from 'react'

type Props = object

const ComponentName: FC<Props> = () => {
    // Component logic here

  return (
    <div>
      {/* JSX content */}
    </div>
  )
}

export default ComponentName
```

4. **Key Rules:**
   - Use `type Props` instead of `interface`
   - Extend HTML attributes when needed
   - Use Tailwind CSS for styling
   - Support `className` override
   - Use alias imports: `import ComponentName from '~/components/Customs/ComponentName'`

## Button Component Rules

### 1. Button Component Structure

**File Location:**

```
src/components/app/Button/index.tsx
```

**Naming Convention:**

- Component name: `Button` (PascalCase)
- File name: `index.tsx`
- Directory: `Button/` (PascalCase)
- Export: `export default Button`

**Required Dependencies:**

```typescript
import { type FC, type ButtonHTMLAttributes } from 'react'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '~/utils/cn'
```

### 2. Button Variants Definition (Sample/Boilerplate)

**Use CVA (class-variance-authority) for variants:**

```typescript
const buttonVariants = cva(
  // Base classes - always applied
  'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none',
  {
    variants: {
      variant: {
        primary: 'bg-blue-600 text-white hover:bg-blue-700',
        secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300',
        outline: 'border border-gray-300 bg-white hover:bg-gray-50 hover:text-gray-900',
        ghost: 'hover:bg-gray-100 hover:text-gray-900',
        destructive: 'bg-red-600 text-white hover:bg-red-700',
      },
      size: {
        sm: 'h-8 px-3 text-sm',
        md: 'h-10 px-4 py-2',
        lg: 'h-12 px-8',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'primary',
      size: 'md',
    },
  },
)
```

### 3. Button Props Type Definition (Sample/Boilerplate)

**Extend HTML attributes and use VariantProps:**

```typescript
type Props = ButtonHTMLAttributes<HTMLButtonElement> &
  VariantProps<typeof buttonVariants> & {
    isLoading?: boolean
  }
```

### 4. Button Component Implementation

**Component structure:**

```typescript
const Button: FC<Props> = ({
  children,
  variant,
  size,
  isLoading = false,
  disabled,
  className,
  ...props
}) => {
  return (
    <button
      className={cn(buttonVariants({ variant, size, className }))}
      disabled={disabled || isLoading}
      {...props}
    >
      {isLoading && (
        <svg className='mr-2 h-4 w-4 animate-spin' xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24'>
          <circle className='opacity-25' cx='12' cy='12' r='10' stroke='currentColor' strokeWidth='4' />
          <path
            className='opacity-75'
            fill='currentColor'
            d='M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'
          />
        </svg>
      )}
      {children}
    </button>
  )
}
```

### 5. Button Usage Examples

**Basic usage:**

```tsx
<Button>Click me</Button>
```

**With variants:**

```tsx
<Button variant="primary">Primary Button</Button>
<Button variant="secondary">Secondary Button</Button>
<Button variant="outline">Outline Button</Button>
<Button variant="ghost">Ghost Button</Button>
<Button variant="destructive">Delete Button</Button>
```

**With sizes:**

```tsx
<Button size="sm">Small</Button>
<Button size="md">Medium</Button>
<Button size="lg">Large</Button>
<Button size="icon">üîç</Button>
```

**With states:**

```tsx
<Button isLoading>Loading...</Button>
<Button disabled>Disabled</Button>
<Button className="custom-class">Custom</Button>
```

## General React Component Rules

### 1. Component File Structure

**Directory Structure:**

```bash
src/components/app/ComponentName/
‚îú‚îÄ‚îÄ index.tsx          # Main component
```

**File Naming:**

- Components: PascalCase (`Button.tsx`, `Header.tsx`)
- Directories: PascalCase (`Button/`, `Header/`)
- Index files: `index.tsx` for components, `index.ts` for exports
- No README files required

### 2. Component Template

**Standard component template:**

```typescript
import { type FC, type HTMLAttributes } from 'react'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '~/utils/cn'

// Define variants using CVA
const componentVariants = cva(
  // Base classes
  'base-classes-here',
  {
    variants: {
      variant: {
        // variant options
      },
      size: {
        // size options
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'md',
    },
  }
)

// Props type definition
type Props = HTMLAttributes<HTMLElement> &
  VariantProps<typeof componentVariants> & {
    // Additional props
  }

// Component implementation
const ComponentName: FC<Props> = ({
  children,
  variant,
  size,
  className,
  ...props
}) => {
  return (
    <div className={cn(componentVariants({ variant, size, className }))} {...props}>
      {children}
    </div>
  )
}

export default ComponentName
```

### 4. Styling Rules

**Tailwind CSS Usage:**

- Use standard Tailwind classes
<!-- - Avoid custom CSS variables unless necessary -->
- Use CVA for variant management
- Use `cn()` utility for class merging

<!-- ### 5. Accessibility Rules

**Required Accessibility Features:**

- Proper ARIA labels for interactive elements
- Keyboard navigation support
- Focus management
- Screen reader compatibility
- Color contrast compliance

**Button Accessibility:**

```typescript
// ‚úÖ CORRECT
<button
  aria-label="Close dialog"
  aria-pressed={isPressed}
  disabled={disabled}
>
  Close
</button>

// ‚ùå INCORRECT
<div onClick={handleClick}>Close</div>
``` -->

### 6. Performance Rules

**Optimization Guidelines:**

- Use `React.memo` for expensive components
- Avoid inline functions in render
- Use proper key props in lists
- Lazy load when appropriate

**Example with React.memo:**

```typescript
const Button = React.memo<Props>(({ children, ...props }) => {
  return <button {...props}>{children}</button>
})
```
