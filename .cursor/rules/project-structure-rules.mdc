---
alwaysApply: true
---

# Project Structure Rules

## Overview

This document defines the project structure and organization rules for the Portfolio v3 project based on the current codebase analysis.

## Project Structure

```
portfoliov3/
├── src/
│   ├── components/           # Reusable UI components
│   │   ├── Customs/         # Custom components (Button, Text, GlowCard, etc.)
│   │   │   ├── ComponentName/
│   │   │   │   └── index.tsx
│   │   │   └── index.ts     # Barrel exports
│   │   ├── HOCs/            # Higher-Order Components
│   │   ├── Layouts/         # Layout components (DefaultLayout, ExperienceLayout)
│   │   │   └── index.tsx    # Barrel exports
│   │   └── Shadcn/          # Shadcn UI components
│   ├── pages/               # Page-level components
│   │   ├── Home/
│   │   ├── Experience/
│   │   ├── Contact/
│   │   └── index.tsx        # Barrel exports
│   ├── hooks/               # Custom React hooks
│   │   └── useMousePosition.ts
│   ├── utils/               # Utility functions
│   │   └── tw-merge.ts
│   ├── domain/              # Domain-specific code
│   │   └── ui/
│   │       └── interfaces/  # TypeScript interfaces
│   │           └── ILayoutProps.ts
│   ├── styles/              # Global styles and themes
│   │   ├── global.css
│   │   ├── fonts.css
│   │   └── mouse-gradient.css
│   ├── assets/              # Static assets
│   │   ├── images/
│   │   ├── fonts/
│   │   └── index.ts         # Asset exports
│   ├── App.tsx              # Main App component
│   ├── main.tsx             # Entry point
│   └── routes.ts            # Route definitions
├── public/                  # Public assets
├── dist/                    # Build output
└── Configuration files      # Config files (vite, tsconfig, etc.)
```

## Structure Rules

### 1. Component Organization

**Components Directory Structure:**

- `Customs/`: Custom reusable components built from scratch
- `Layouts/`: Layout wrapper components for pages
- `HOCs/`: Higher-Order Components for cross-cutting concerns
- `Shadcn/`: Third-party UI components (Shadcn/ui)

**Component Creation Pattern:**

```bash
mkdir -p src/components/Customs/ComponentName
touch src/components/Customs/ComponentName/index.tsx
```

### 2. File Naming Conventions

- **Components**: PascalCase (`Button.tsx`, `HomePage.tsx`)
- **Hooks**: camelCase with `use` prefix (`useMousePosition.ts`)
- **Utilities**: camelCase (`tw-merge.ts`)
- **Interfaces**: PascalCase with `I` prefix (`ILayoutProps.ts`)
- **Pages**: PascalCase with `Page` suffix (`HomePage.tsx`)

### 3. Barrel Exports Pattern

**Use index files for clean imports:**

```typescript
// src/components/Customs/index.ts
export { default as Button } from './Button'
export { default as Text } from './Text'
export { default as GlowCard } from './GlowCard'

// src/pages/index.tsx
export { default as HomePage } from './Home'
export { default as ExperiencePage } from './Experience'
```

**Import Usage:**

```typescript
// ✅ CORRECT - Use barrel exports
import { Button, Text } from '~/components/Customs'
import { HomePage, ExperiencePage } from '~/pages'

// ❌ INCORRECT - Direct imports
import Button from '~/components/Customs/Button'
import HomePage from '~/pages/Home'
```

### 4. Route Management

**Centralized Routing in `src/routes.ts`:**

```typescript
type Route = {
  path: string
  component: ComponentType
  layout?: ComponentType<ILayoutProps>
}

const publicRoutes: Route[] = [
  {
    path: '/',
    component: HomePage,
    layout: DefaultLayout,
  },
  {
    path: '/experience',
    component: ExperiencePage,
    layout: ExperienceLayout,
  },
]
```

**Route Structure Rules:**

- Define all routes in `src/routes.ts`
- Separate public and private routes
- Each route can have a specific layout
- Use TypeScript for route type safety

### 5. Asset Management

**Asset Organization:**

- **Images**: `src/assets/images/`
- **Fonts**: `src/assets/fonts/`
- **Other Assets**: `src/assets/`

**Asset Export Pattern:**

```typescript
// src/assets/index.ts
export { default as image1 } from './images/image-1.png'
export { default as calibreFont } from './fonts/Calibre/Calibre-Regular.otf'
```

### 6. Styling Structure

**Global Styles:**

- `src/styles/global.css` - Global styles
- `src/styles/fonts.css` - Font definitions
- `src/styles/mouse-gradient.css` - Custom effects

**Component Styling:**

- Use Tailwind CSS for component styles
- CSS modules when needed for complex styling
- Global CSS for theme variables and utilities

### 7. Domain Organization

**Domain Structure:**

```
src/domain/
└── ui/
    └── interfaces/
        └── ILayoutProps.ts
```

**Interface Naming:**

- Use `I` prefix for interfaces
- PascalCase naming
- Group related interfaces in domain folders

### 8. Configuration Files

**Root Level Configuration:**

- `vite.config.ts` - Vite configuration with alias setup
- `tsconfig.json` - TypeScript configuration
- `eslint.config.js` - ESLint configuration
- `package.json` - Dependencies and scripts

**Alias Configuration:**

```typescript
// vite.config.ts
resolve: {
  alias: {
    '~': path.resolve(__dirname, './src'),
  },
}

// tsconfig.json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "~/*": ["src/*"]
    }
  }
}
```

## Import Guidelines

### Always Use Alias Imports

```typescript
// ✅ CORRECT
import { Button } from '~/components/Customs'
import { useMousePosition } from '~/hooks/useMousePosition'
import { ILayoutProps } from '~/domain/ui/interfaces/ILayoutProps'
import routes from '~/routes'

// ❌ INCORRECT
import { Button } from '../../components/Customs'
import { useMousePosition } from '../hooks/useMousePosition'
```

### Barrel Export Usage

```typescript
// ✅ CORRECT - Import from barrel exports
import { Button, Text, GlowCard } from '~/components/Customs'
import { HomePage, ExperiencePage } from '~/pages'

// ✅ CORRECT - Import specific component
import Button from '~/components/Customs/Button'
```

## Best Practices

### 1. Component Structure

- Keep components small and focused
- Use functional components with hooks
- Follow the component template pattern
- Export components as default exports

### 2. File Organization

- One component per file
- Use index.tsx for component files
- Use index.ts for barrel exports
- Keep related files together

### 3. TypeScript Usage

- Use strict TypeScript mode
- Define proper types for all props
- Use interfaces for complex object shapes
- Avoid `any` type

### 4. Performance

- Use React.memo for expensive components
- Implement lazy loading for routes
- Optimize imports with barrel exports
- Use proper key props in lists

### 5. Accessibility

- Include proper ARIA labels
- Ensure keyboard navigation
- Maintain heading hierarchy
- Test with screen readers

## DO NOT

- Use relative imports (`../../`, `../`, `./`)
- Create deeply nested folder structures
- Mix different component types in the same directory
- Use class components
- Ignore TypeScript errors
- Skip accessibility requirements
- Create overly complex components
- Use deprecated React patterns
  description: project structure rules
  globs: \*
  alwaysApply: true
