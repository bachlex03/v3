---
alwaysApply: true
---

# Project Structure Rules

## Overview

This document defines the project structure and organization rules for the Portfolio v3 project based on the current codebase analysis.

## Project Structure

```
portfoliov3/
├── src/
│   ├── components/           # Reusable UI components
│   │   ├── app/             # Application-specific components
│   │   │   ├── ComponentName/ # App component
│   │   │   ├── ...
│   │   │   └── index.ts     # Barrel exports
│   │   ├── layouts/         # Layout components
│   │   │   ├── _components/ # Layout sub-components (private component only used in layouts/)
│   │   │   │   └── Header/
│   │   │   ├── DefaultLayout/
│   │   │   ├── HeaderOnlyLayout/
│   │   │   ├── MouseGradientLayout/
│   │   │   └── index.tsx    # Barrel exports
│   │   ├── 3rd/             # Third-party components
│   │   │   └── shadcn-ui/   # Shadcn UI components
│   │   └── HOCs/            # Higher-Order Components
│   ├── pages/               # Page-level components
│   │   ├── Home/
│   │   ├── Experience/
│   │   ├── Contact/
│   │   └── index.tsx        # Barrel exports
│   ├── hooks/               # Custom React hooks
│   │   └── useMousePosition.ts
│   ├── utils/               # Utility functions
│   │   └── tw-merge.ts
│   ├── domain/              # Domain-specific code
│   │   └── ui/
│   │       └── types/       # TypeScript types
│   │           └── TLayoutProps.ts
│   ├── styles/              # Global styles and themes
│   │   ├── global.css
│   │   ├── fonts.css
│   │   └── mouse-gradient.css
│   ├── assets/              # Static assets
│   │   ├── images/
│   │   ├── fonts/
│   │   └── index.ts         # Asset exports
│   ├── App.tsx              # Main App component
│   ├── main.tsx             # Entry point
│   ├── routes.ts            # Route definitions
│   └── vite-env.d.ts        # Vite environment types
├── public/                  # Public assets
├── dist/                    # Build output
└── Configuration files      # Config files (vite, tsconfig, etc.)
```

## Structure Rules

### 1. Component Organization

**Components Directory Structure:**

- `app/`: Application-specific components (Button, Text, GlowCard, etc.)
- `layouts/`: Layout wrapper components with sub-components
- `_components/`: Private layout sub-components (Header, Footer, etc.)
- `3rd/`: Third-party components (shadcn-ui, etc.)
- `HOCs/`: Higher-Order Components for cross-cutting concerns

**Component Creation Pattern:**

```bash
# For app components
mkdir -p src/components/app/ComponentName
touch src/components/app/ComponentName/index.tsx

# For layout components
mkdir -p src/components/layouts/ComponentName
touch src/components/layouts/ComponentName/index.tsx

```

### 2. Asset Management

**Asset Organization:**

- **Images**: `src/assets/images/`
- **Fonts**: `src/assets/fonts/`
- **Other Assets**: `src/assets/`

### 6. Styling Structure

**Global Styles:**

- `src/styles/global.css` - Global styles
- `src/styles/fonts.css` - Font definitions
- `src/styles/mouse-gradient.css` - Custom effects

**Component Styling:**

- Use Tailwind CSS for component styles
- CSS modules when needed for complex styling
- Global CSS for theme variables and utilities

### 3. Domain Organization

**Domain Structure:**

```
src/domain/
└── ui/
    └── types/
        └── TLayoutProps.ts
```

**Type Naming:**

- Use `T` prefix for types
- PascalCase naming
- Group related types in domain folders

### 4. Configuration Files

**Root Level Configuration:**

- `vite.config.ts` - Vite configuration with alias setup
- `tsconfig.json` - TypeScript configuration
- `eslint.config.js` - ESLint configuration
- `package.json` - Dependencies and scripts

**Alias Configuration:**

```typescript
// vite.config.ts
resolve: {
  alias: {
    '~': path.resolve(__dirname, './src'),
  },
}

// tsconfig.json
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "~/*": ["src/*"]
    }
  }
}
```
