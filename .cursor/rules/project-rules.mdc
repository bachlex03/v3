---
alwaysApply: true
globs: *
---

# Portfolio v3 Project Rules

## Project Overview

This is a React TypeScript portfolio website built with Vite. The project showcases personal work, skills, and experience with a modern, performant web application.

## Tech Stack

- **Framework**: React 18+ with TypeScript
- **Build Tool**: Vite
- **Styling**: CSS Modules / Tailwind CSS
- **Package Manager**: Yarn
- **Linting**: ESLint with TypeScript support

## Code Style Guidelines

### TypeScript

- Use TypeScript strict mode
- Prefer interfaces over types for object shapes
- Use explicit return types for functions
- Avoid `any` type - use `unknown` if type is truly unknown
- Use const assertions where appropriate

### React Components

- Use functional components with hooks exclusively
- Prefer named exports for components
- Component files should be in PascalCase (e.g., `Button.tsx`, `Header.tsx`)
- Keep components small and focused on a single responsibility
- Use custom hooks for reusable logic

### Import Guidelines

**ALWAYS use alias imports instead of relative imports:**

- ✅ **DO**: Use `~/` alias for all imports from src folder
- ❌ **DON'T**: Use relative imports like `../../`, `../`, `./`

**Examples:**

```typescript
// ✅ CORRECT - Use alias imports
import { Button } from '~/components/Button'
import { useMousePosition } from '~/hooks/useMousePosition'
import { ILayoutProps } from '~/domain/ui/interfaces/ILayoutProps'
import { DefaultLayout } from '~/components/Layouts'
import routes from '~/routes'

// ❌ INCORRECT - Avoid relative imports
import { Button } from '../../components/Button'
import { useMousePosition } from '../hooks/useMousePosition'
import { ILayoutProps } from '../../../domain/ui/interfaces/ILayoutProps'
import { DefaultLayout } from './components/Layouts'
import routes from './routes'
```

**Alias Configuration:**

- `~/*` maps to `src/*`
- Configured in both `tsconfig.json` and `vite.config.ts`
- Provides clean, consistent import paths regardless of file location

### File Structure

The project follows this structure:

- [src/components/](mdc:src/components/) - Reusable UI components
- [src/pages/](mdc:src/pages/) - Page-level components
- [src/hooks/](mdc:src/hooks/) - Custom React hooks
- [src/utils/](mdc:src/utils/) - Utility functions
- [src/types/](mdc:src/types/) - TypeScript type definitions
- [src/styles/](mdc:src/styles/) - Global styles and themes
- [src/assets/](mdc:src/assets/) - Images, fonts, etc.

### Component Template

All components should follow this structure:

```typescript
import { type FC } from 'react'
import { SomeComponent } from '~/components/SomeComponent'
import { useSomeHook } from '~/hooks/useSomeHook'
import type { SomeType } from '~/types/SomeType'

interface ComponentNameProps {
  // Define props here
}

export const ComponentName: FC<ComponentNameProps> = ({ ...props }) => {
  // Component logic here

  return (
    <div>
      {/* JSX content */}
    </div>
  )
}
```

### Best Practices

1. **Performance**

   - Use React.memo for expensive components
   - Implement lazy loading for routes
   - Optimize images and assets
   - Use proper key props in lists

2. **Accessibility**

   - Include proper ARIA labels
   - Ensure keyboard navigation works
   - Maintain proper heading hierarchy
   - Test with screen readers

3. **State Management**

   - Use local state when possible
   - Consider Context API for cross-component state
   - Avoid prop drilling

4. **Error Handling**
   - Implement error boundaries
   - Handle async errors properly
   - Provide user-friendly error messages

### Git Commit Messages

Use conventional commits format:

- `feat:` for new features
- `fix:` for bug fixes
- `docs:` for documentation
- `style:` for formatting
- `refactor:` for code restructuring
- `test:` for tests
- `chore:` for maintenance

### DO NOT

- Use class components
- Commit sensitive information
- Use inline styles extensively
- Ignore TypeScript errors
- Skip accessibility requirements
- Create overly complex components
- Use deprecated React patterns
- **Use relative imports** - Always use `~/` alias instead

### Portfolio-Specific Priorities

Since this is a portfolio site, prioritize:

- Visual appeal and smooth animations
- Fast loading times
- Mobile responsiveness
- SEO optimization
- Professional presentation

### Key Files

- [package.json](mdc:package.json) - Project dependencies and scripts
- [vite.config.ts](mdc:vite.config.ts) - Vite configuration
- [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration
- [src/App.tsx](mdc:src/App.tsx) - Main application component
- [src/main.tsx](mdc:src/main.tsx) - Application entry point
